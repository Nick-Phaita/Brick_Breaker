  pygame.mixer.init()
    hit_sound = pygame.mixer.Sound("assets/sounds/hit.wav")
    break_sound = pygame.mixer.Sound("assets/sounds/break.wav")
    powerup_sound = pygame.mixer.Sound("assets/sounds/powerup.wav")


    # Default values (fallbacks)

    pygame.mixer.music.load(level_config["music"])
    pygame.mixer.music.play(-1)

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_p:  # Pause menu
                pause_menu(screen)

        # Handle input
        keys = pygame.key.get_pressed()
        paddle.move(keys)
        ball.move()

        # Check collisions
        if ball.check_paddle_collision(paddle):
            hit_sound.play()

        #particles = []  # Initialize particles


        # Check brick collisions and update score
        if ball.check_brick_collision(bricks, power_ups, particles):
            break_sound.play()
            score += 10  # Increment score for each brick hit
